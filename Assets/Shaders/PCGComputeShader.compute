// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define MAX_X_THREADS 16
#define MAX_Y_THREADS 16
#define MAX_Z_THREADS 4

#define MAX_BRANCHES 3
#define MAX_ROTATION 30
#define MAX_ITERATIONS 8

struct BranchData
{
	float3 branchRotation;

	float branchScale;

	int numberOfChildBranches;
    int connectedChildBranches;
    
    int childBranchesStartIdx;
};

BranchData CreateDefaultBranchData()
{
    BranchData defaultData;
    
    defaultData.branchRotation = float4(0, 0, 0, 1);
    
    defaultData.branchScale = -2.0f;
    
    defaultData.numberOfChildBranches = 0;
    defaultData.connectedChildBranches = 0;

    defaultData.childBranchesStartIdx = -1;
    
    return defaultData;
}

// Info that's passed to and from the CPU
RWStructuredBuffer<BranchData> dataBuffer;
RWStructuredBuffer<int> connectionsBuffer;
RWStructuredBuffer<int> argsBuffer;

[numthreads(MAX_X_THREADS, MAX_Y_THREADS, MAX_Z_THREADS)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Getting the start index for all info on the currentGeneration
    int maxPossibleBranches = 0;
    for (int i = 1; i <= MAX_ITERATIONS; i++)
    {
        int addition = (pow(MAX_BRANCHES, (i - 1)));
        maxPossibleBranches += (addition);
    }
    int currentGeneration = (id.z * MAX_X_THREADS * MAX_Y_THREADS) + (id.y * MAX_X_THREADS) + id.x;
    int currentGenStartIdx = (maxPossibleBranches * currentGeneration);
    
    // Info required to recursively generate the tree
    int createdBranches = 0;
    int branchesToCreate = 0;

    int workingIteration = 0;

    int workingBranchTree[MAX_ITERATIONS];
        
    // Creating the start of the tree
    BranchData treeStart = CreateDefaultBranchData();

    // Handling branch size
    treeStart.branchScale = 1.0f;

    // Handling branch rotation
    treeStart.branchRotation = float3(0, 0, 0);

    // Setting up child branch connections
    treeStart.childBranchesStartIdx = currentGenStartIdx;
    treeStart.numberOfChildBranches = MAX_BRANCHES;
    branchesToCreate = MAX_BRANCHES;

    // Storing newly created branch
    workingBranchTree[0] = currentGenStartIdx + createdBranches;
    dataBuffer[currentGenStartIdx + createdBranches] = treeStart;

    // Storing amount of created data on both the branch data buffer and connections buffer (alternative to getting the size of the array)
    argsBuffer[0] = (createdBranches + 1);
    argsBuffer[1] = branchesToCreate;

    // Compute shaders don't support recursive methods so the algorithm needs to be restructured to work with a while loop
    bool isComplete = false;
    while (!isComplete)
    {
        // Checking if the tree has finished generating
        if ((createdBranches == (branchesToCreate)) && (workingIteration == (MAX_ITERATIONS - 1)))
        {
            isComplete = true;
        }
        // Otherwise gets the next branch to generate
        else
        {
            // If the current branch is at the end of the tree then need to backtrack till a unfinished branch is found
            if (workingIteration == (MAX_ITERATIONS - 1))
            {
                bool suitableBranchFound = false;
                while (!suitableBranchFound)
                {
                    // Cleaning up working tree
                    //workingBranchTree[workingIteration] = NULL;

                    // Moving back up the tree
                    workingIteration--;
                    // Checking that if the backtracking has found no suitable branch to build from
                    if (workingIteration == -1)
                    {
                        //UnityEngine.Debug.LogError("ERROR: No suitable branch found to build from");
                        //UnityEngine.Debug.Break();
                    }
                    int branchIdx = workingBranchTree[workingIteration];
                    BranchData branchToCheck = dataBuffer[branchIdx];

                    // Checking if that branch has had all of it's sub branches made
                    // If not then the generation can continue with that branch
                    if (branchToCheck.connectedChildBranches != branchToCheck.numberOfChildBranches)
                    {
                        suitableBranchFound = true;
                    }
                }
            }

            // Then build off of the current branch
            int previousBranchIdx = workingBranchTree[workingIteration];
            BranchData previousBranch = dataBuffer[previousBranchIdx];;

            // Creating new branch
            createdBranches++;
            BranchData newBranch = CreateDefaultBranchData();
            workingIteration++;

            // Setting the details of the new branch
            // Handling branch size
            newBranch.branchScale = 1.0f;

            // Handling branch rotation
            //newBranch.branchRotation = Quaternion.Euler(branchAngle, ((360.0f / previousBranch.numberOfChildBranches) * previousBranch.connectedChildBranches), 0);
            newBranch.branchRotation = float3(MAX_ROTATION, ((360 / previousBranch.numberOfChildBranches) * previousBranch.connectedChildBranches), 0);
            
            // Checking if child branches should be added to the new branch
            if (workingIteration < (MAX_ITERATIONS - 1))
            {
                newBranch.numberOfChildBranches = MAX_BRANCHES;
                newBranch.childBranchesStartIdx = currentGenStartIdx + branchesToCreate;
                branchesToCreate += MAX_BRANCHES;

                // Storing amount of created data on both the connections buffer (only increases this if the branch is not at the end of the tree)
                argsBuffer[1] = branchesToCreate + 1 + currentGenStartIdx;
            }

            // Connecting the previous branch to the new branch
            connectionsBuffer[previousBranch.childBranchesStartIdx + previousBranch.connectedChildBranches] = createdBranches;
            previousBranch.connectedChildBranches++;

            // Saving changed details on the old branch
            dataBuffer[workingBranchTree[workingIteration - 1]] = previousBranch;

            // Saving new branch
            dataBuffer[currentGenStartIdx + createdBranches] = newBranch;
            workingBranchTree[workingIteration] = currentGenStartIdx + createdBranches;

            // Storing amount of created data on the branch data buffer
            argsBuffer[0] = (createdBranches + 1) + currentGenStartIdx;
        }
    }
}